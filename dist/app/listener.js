import path from "path";
import chalk from "chalk";
import * as logger from "./logger.js";
import * as handler from "./handler.js";
const listenerHandler = new handler.Handler(process.env.BOT_LISTENERS_PATH ?? path.join(process.cwd(), "dist", "listeners"));
listenerHandler.on("load", async (filepath, client) => {
  const file = await import("file://" + filepath);
  const listener = file.default;
  client[listener.once ? "once" : "on"](listener.event, async (...args) => {
    try {
      await listener.run.bind(client)(...args);
    } catch (error) {
      logger.error(error, "listener:handling:" + listener.event);
    }
  });
  logger.log(`loaded listener ${chalk.yellow(listener.once ? "once" : "on")} ${chalk.blueBright(listener.event)} ${chalk.green(path.basename(filepath, ".js").replace(`${listener.event}.`, ""))} ${chalk.grey(listener.description)}`);
});
export {
  listenerHandler
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2FwcC9saXN0ZW5lci50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IGRpc2NvcmQgZnJvbSBcImRpc2NvcmQuanNcIlxyXG5pbXBvcnQgcGF0aCBmcm9tIFwicGF0aFwiXHJcbmltcG9ydCBjaGFsayBmcm9tIFwiY2hhbGtcIlxyXG5pbXBvcnQgYXBpVHlwZXMgZnJvbSBcImRpc2NvcmQtYXBpLXR5cGVzL3Y4XCJcclxuXHJcbmltcG9ydCAqIGFzIGxvZ2dlciBmcm9tIFwiLi9sb2dnZXIuanNcIlxyXG5pbXBvcnQgKiBhcyBoYW5kbGVyIGZyb20gXCIuL2hhbmRsZXIuanNcIlxyXG5cclxuZXhwb3J0IGNvbnN0IGxpc3RlbmVySGFuZGxlciA9IG5ldyBoYW5kbGVyLkhhbmRsZXIoXHJcbiAgcHJvY2Vzcy5lbnYuQk9UX0xJU1RFTkVSU19QQVRIID8/XHJcbiAgICBwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgXCJkaXN0XCIsIFwibGlzdGVuZXJzXCIpXHJcbilcclxuXHJcbmxpc3RlbmVySGFuZGxlci5vbihcImxvYWRcIiwgYXN5bmMgKGZpbGVwYXRoLCBjbGllbnQpID0+IHtcclxuICBjb25zdCBmaWxlID0gYXdhaXQgaW1wb3J0KFwiZmlsZTovL1wiICsgZmlsZXBhdGgpXHJcbiAgY29uc3QgbGlzdGVuZXIgPSBmaWxlLmRlZmF1bHQgYXMgTGlzdGVuZXI8YW55PlxyXG5cclxuICBjbGllbnRbbGlzdGVuZXIub25jZSA/IFwib25jZVwiIDogXCJvblwiXShsaXN0ZW5lci5ldmVudCwgYXN5bmMgKC4uLmFyZ3MpID0+IHtcclxuICAgIHRyeSB7XHJcbiAgICAgIGF3YWl0IGxpc3RlbmVyLnJ1bi5iaW5kKGNsaWVudCkoLi4uYXJncylcclxuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcclxuICAgICAgbG9nZ2VyLmVycm9yKGVycm9yLCBcImxpc3RlbmVyOmhhbmRsaW5nOlwiICsgbGlzdGVuZXIuZXZlbnQpXHJcbiAgICB9XHJcbiAgfSlcclxuXHJcbiAgbG9nZ2VyLmxvZyhcclxuICAgIGBsb2FkZWQgbGlzdGVuZXIgJHtjaGFsay55ZWxsb3coXHJcbiAgICAgIGxpc3RlbmVyLm9uY2UgPyBcIm9uY2VcIiA6IFwib25cIlxyXG4gICAgKX0gJHtjaGFsay5ibHVlQnJpZ2h0KGxpc3RlbmVyLmV2ZW50KX0gJHtjaGFsay5ncmVlbihcclxuICAgICAgcGF0aC5iYXNlbmFtZShmaWxlcGF0aCwgXCIuanNcIikucmVwbGFjZShgJHtsaXN0ZW5lci5ldmVudH0uYCwgXCJcIilcclxuICAgICl9ICR7Y2hhbGsuZ3JleShsaXN0ZW5lci5kZXNjcmlwdGlvbil9YFxyXG4gIClcclxufSlcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTW9yZUNsaWVudEV2ZW50cyB7XHJcbiAgcmF3OiBbcGFja2V0OiBhcGlUeXBlcy5HYXRld2F5RGlzcGF0Y2hQYXlsb2FkXVxyXG4gIGNsaWNrQnV0dG9uOiBbYnV0dG9uOiBkaXNjb3JkLk1lc3NhZ2VDb21wb25lbnRdXHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIEFsbENsaWVudEV2ZW50cyA9IGRpc2NvcmQuQ2xpZW50RXZlbnRzICYgTW9yZUNsaWVudEV2ZW50c1xyXG5cclxuZXhwb3J0IHR5cGUgTGlzdGVuZXI8RXZlbnROYW1lIGV4dGVuZHMga2V5b2YgQWxsQ2xpZW50RXZlbnRzPiA9IHtcclxuICBldmVudDogRXZlbnROYW1lXHJcbiAgZGVzY3JpcHRpb246IHN0cmluZ1xyXG4gIHJ1bjogKHRoaXM6IGRpc2NvcmQuQ2xpZW50LCAuLi5hcmdzOiBBbGxDbGllbnRFdmVudHNbRXZlbnROYW1lXSkgPT4gdW5rbm93blxyXG4gIG9uY2U/OiBib29sZWFuXHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIkFBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFFTyxNQUFNLGtCQUFrQixJQUFJLFFBQVEsUUFDekMsUUFBUSxJQUFJLHNCQUNWLEtBQUssS0FBSyxRQUFRLE9BQU8sUUFBUTtBQUdyQyxnQkFBZ0IsR0FBRyxRQUFRLE9BQU8sVUFBVSxXQUFXO0FBQ3JELFFBQU0sT0FBTyxNQUFNLE9BQU8sWUFBWTtBQUN0QyxRQUFNLFdBQVcsS0FBSztBQUV0QixTQUFPLFNBQVMsT0FBTyxTQUFTLE1BQU0sU0FBUyxPQUFPLFVBQVUsU0FBUztBQUN2RSxRQUFJO0FBQ0YsWUFBTSxTQUFTLElBQUksS0FBSyxRQUFRLEdBQUc7QUFBQSxhQUM1QixPQUFQO0FBQ0EsYUFBTyxNQUFNLE9BQU8sdUJBQXVCLFNBQVM7QUFBQTtBQUFBO0FBSXhELFNBQU8sSUFDTCxtQkFBbUIsTUFBTSxPQUN2QixTQUFTLE9BQU8sU0FBUyxTQUN0QixNQUFNLFdBQVcsU0FBUyxVQUFVLE1BQU0sTUFDN0MsS0FBSyxTQUFTLFVBQVUsT0FBTyxRQUFRLEdBQUcsU0FBUyxVQUFVLFFBQzFELE1BQU0sS0FBSyxTQUFTO0FBQUE7IiwKICAibmFtZXMiOiBbXQp9Cg==
